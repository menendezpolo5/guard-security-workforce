apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-portal-config
  namespace: guard-security
data:
  REACT_APP_API_URL: "https://api.guard-security.com"
  REACT_APP_CLERK_PUBLISHABLE_KEY: "pk_live_clerk_key_here"
  REACT_APP_GOOGLE_MAPS_API_KEY: "google_maps_api_key_here"
  REACT_APP_ENVIRONMENT: "production"
  REACT_APP_VERSION: "1.0.0"
  REACT_APP_SENTRY_DSN: "sentry_dsn_here"
  REACT_APP_ANALYTICS_ID: "analytics_id_here"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: client-portal-config
  namespace: guard-security
data:
  REACT_APP_API_URL: "https://api.guard-security.com"
  REACT_APP_CLERK_PUBLISHABLE_KEY: "pk_live_clerk_key_here"
  REACT_APP_GOOGLE_MAPS_API_KEY: "google_maps_api_key_here"
  REACT_APP_ENVIRONMENT: "production"
  REACT_APP_VERSION: "1.0.0"
  REACT_APP_SENTRY_DSN: "sentry_dsn_here"
  REACT_APP_ANALYTICS_ID: "analytics_id_here"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-portal
  namespace: guard-security
  labels:
    app: admin-portal
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: admin-portal
  template:
    metadata:
      labels:
        app: admin-portal
        version: v1
    spec:
      containers:
      - name: admin-portal
        image: ghcr.io/menendezpolo5/guard-security-workforce-admin-portal:latest
        ports:
        - containerPort: 80
          name: http
        envFrom:
        - configMapRef:
            name: admin-portal-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: admin-portal-service
  namespace: guard-security
  labels:
    app: admin-portal
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: admin-portal
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-portal
  namespace: guard-security
  labels:
    app: client-portal
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: client-portal
  template:
    metadata:
      labels:
        app: client-portal
        version: v1
    spec:
      containers:
      - name: client-portal
        image: ghcr.io/menendezpolo5/guard-security-workforce-client-portal:latest
        ports:
        - containerPort: 80
          name: http
        envFrom:
        - configMapRef:
            name: client-portal-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: client-portal-service
  namespace: guard-security
  labels:
    app: client-portal
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: client-portal
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: guard-security-ingress
  namespace: guard-security
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - admin.guard-security.com
    - client.guard-security.com
    - api.guard-security.com
    secretName: guard-security-tls
  rules:
  - host: admin.guard-security.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: admin-portal-service
            port:
              number: 80
  - host: client.guard-security.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: client-portal-service
            port:
              number: 80
  - host: api.guard-security.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-api-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: admin-portal-hpa
  namespace: guard-security
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: admin-portal
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: client-portal-hpa
  namespace: guard-security
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: client-portal
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70