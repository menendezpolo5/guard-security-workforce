version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: guard-postgres
    environment:
      POSTGRES_DB: guard_db
      POSTGRES_USER: guard_user
      POSTGRES_PASSWORD: guard_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - guard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U guard_user -d guard_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: guard-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://guard_user:guard_password@postgres:5432/guard_db
      - PORT=3001
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - guard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Portal
  admin-portal:
    build:
      context: ./admin-portal
      dockerfile: Dockerfile
    container_name: guard-admin
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./admin-portal:/app
      - /app/node_modules
    networks:
      - guard-network

  # Client Portal
  client-portal:
    build:
      context: ./client-portal
      dockerfile: Dockerfile
    container_name: guard-client
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
    ports:
      - "3002:3000"
    depends_on:
      - backend
    volumes:
      - ./client-portal:/app
      - /app/node_modules
    networks:
      - guard-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: guard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - guard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: guard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
      - admin-portal
      - client-portal
    networks:
      - guard-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: guard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - guard-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: guard-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - guard-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  guard-network:
    driver: bridge